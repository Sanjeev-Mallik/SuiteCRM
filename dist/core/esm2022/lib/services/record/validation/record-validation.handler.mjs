import { Injectable } from "@angular/core";
import * as i0 from "@angular/core";
export class RecordValidationHandler {
    /**
     * Initialize Record Validators
     * @param record
     */
    initValidators(record) {
        if (!record) {
            return;
        }
        record?.formGroup?.clearValidators();
        const fields = record?.fields ?? {};
        Object.keys(fields).forEach(fieldName => {
            const field = record.fields[fieldName];
            const formControl = field?.formControl ?? null;
            if (!formControl) {
                return;
            }
            this.initFieldValidators(field);
            this.initLineItemsValidators(field);
        });
    }
    /**
     * reset record field validators
     * @param record
     */
    resetValidators(record) {
        if (!record) {
            return;
        }
        record?.formGroup?.clearValidators();
        const fields = record?.fields ?? {};
        Object.keys(fields).forEach(fieldName => {
            const field = record.fields[fieldName];
            this.resetFieldValidators(field);
            this.resetLineItemsValidators(field);
        });
    }
    /**
     * Set field validators
     * @param field
     * @param validators
     * @param asyncValidators
     */
    setFormControlValidators(field, validators, asyncValidators) {
        if (!field?.formControl) {
            return;
        }
        if (validators?.length) {
            field.formControl.setValidators(validators);
        }
        if (asyncValidators?.length) {
            field.formControl.setAsyncValidators(asyncValidators);
        }
    }
    /**
     * Reset field validators
     * @param field
     */
    resetFormControlValidators(field) {
        if (!field?.formControl) {
            return;
        }
        field.formControl.clearValidators();
        field.formControl.clearAsyncValidators();
    }
    /**
     * Initialize Field validators
     * @param field
     */
    initFieldValidators(field) {
        this.resetFormControlValidators(field);
        this.setFormControlValidators(field, field?.validators ?? [], field?.asyncValidators ?? []);
        const fieldAttributes = field?.attributes ?? {};
        Object.keys(fieldAttributes).forEach(fieldAttributeName => {
            const fieldAttribute = fieldAttributes[fieldAttributeName];
            this.resetFormControlValidators(fieldAttribute);
            this.setFormControlValidators(fieldAttribute, fieldAttribute?.validators ?? [], fieldAttribute?.asyncValidators ?? []);
        });
    }
    /**
     * Initialize Field validators
     * @param field
     */
    resetFieldValidators(field) {
        this.resetFormControlValidators(field);
        const fieldAttributes = field?.attributes ?? {};
        Object.keys(fieldAttributes).forEach(fieldAttributeName => {
            const fieldAttribute = fieldAttributes[fieldAttributeName];
            this.resetFormControlValidators(fieldAttribute);
        });
    }
    /**
     * Initialize Line Items validators
     * @param field
     */
    initLineItemsValidators(field) {
        if (!field?.itemFormArray) {
            return;
        }
        const itemFormArraySaveValidators = field?.itemFormArraySaveValidators ?? [];
        if (itemFormArraySaveValidators.length) {
            field.itemFormArray.clearValidators();
            field.itemFormArray.addValidators(itemFormArraySaveValidators);
        }
        const items = field?.items ?? [];
        items.forEach(item => {
            const itemFields = item?.fields ?? {};
            Object.keys(itemFields).forEach(itemFieldName => {
                const itemField = itemFields[itemFieldName];
                this.initFieldValidators(itemField);
            });
        });
    }
    /**
     * Initialize Line Items validators
     * @param field
     */
    resetLineItemsValidators(field) {
        if (!field?.itemFormArray) {
            return;
        }
        field.itemFormArray.clearValidators();
        const items = field?.items ?? [];
        items.forEach(item => {
            const itemFields = item?.fields ?? {};
            Object.keys(itemFields).forEach(itemFieldName => {
                const itemField = itemFields[itemFieldName];
                this.resetFieldValidators(field);
            });
        });
    }
    static { this.ɵfac = function RecordValidationHandler_Factory(__ngFactoryType__) { return new (__ngFactoryType__ || RecordValidationHandler)(); }; }
    static { this.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: RecordValidationHandler, factory: RecordValidationHandler.ɵfac, providedIn: 'root' }); }
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(RecordValidationHandler, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], null, null); })();
//# sourceMappingURL=data:application/json;base64,