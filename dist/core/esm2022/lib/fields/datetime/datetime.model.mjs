export class DateTimeModel {
    constructor(init) {
        this.hourStep = 1;
        this.minuteStep = 15;
        this.secondStep = 30;
        this.displaySeconds = false;
        Object.assign(this, init);
    }
    static toDateTimeStruct(formatter, dateString) {
        if (!dateString) {
            return null;
        }
        const dateTimeStruct = formatter.userDateTimeFormatToStruct(dateString);
        if (!dateTimeStruct) {
            return null;
        }
        const { date, time } = dateTimeStruct;
        return new DateTimeModel({
            date: date,
            time: time
        });
    }
    static internalToDateTimeStruct(formatter, dateString) {
        if (!dateString) {
            return null;
        }
        const dateTimeStruct = formatter.internalDateTimeFormatToStruct(dateString);
        if (!dateTimeStruct) {
            return null;
        }
        const { date, time } = dateTimeStruct;
        return new DateTimeModel({
            date: date,
            time: time
        });
    }
    toUserFormat(formatter, options) {
        //prepare datetime string in yyyy-M-d H:m:s format (datetimepicker default)
        const dateString = [this.date.year, this.date.month, this.date.day].join('-');
        const timeString = [this.time.hour, this.time.minute, this.time.second].join(':');
        const datetimeString = [dateString, timeString].join(' ');
        const internalDateTimeString = formatter.toInternalFormat(datetimeString, { fromFormat: 'yyyy-M-d H:m:s' });
        //convert from yyyy-M-d H:m:s format to user format
        return formatter.toUserFormat(internalDateTimeString, { ...options, fromFormat: 'yyyy-M-d H:m:s' });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZXRpbWUubW9kZWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9jb3JlL2FwcC9jb3JlL3NyYy9saWIvZmllbGRzL2RhdGV0aW1lL2RhdGV0aW1lLm1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUlBLE1BQU0sT0FBTyxhQUFhO0lBUXRCLFlBQW1CLElBQTZCO1FBUGhELGFBQVEsR0FBRyxDQUFDLENBQUM7UUFDYixlQUFVLEdBQUcsRUFBRSxDQUFDO1FBQ2hCLGVBQVUsR0FBRyxFQUFFLENBQUM7UUFDaEIsbUJBQWMsR0FBWSxLQUFLLENBQUM7UUFLNUIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQUVNLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLEVBQUUsVUFBa0I7UUFDeEQsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1lBQ2QsT0FBTyxJQUFJLENBQUM7UUFDaEIsQ0FBQztRQUNELE1BQU0sY0FBYyxHQUFHLFNBQVMsQ0FBQywwQkFBMEIsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUV4RSxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7WUFDbEIsT0FBTyxJQUFJLENBQUM7UUFDaEIsQ0FBQztRQUNELE1BQU0sRUFBQyxJQUFJLEVBQUUsSUFBSSxFQUFDLEdBQUcsY0FBYyxDQUFDO1FBQ3BDLE9BQU8sSUFBSSxhQUFhLENBQUM7WUFDckIsSUFBSSxFQUFFLElBQUk7WUFDVixJQUFJLEVBQUUsSUFBSTtTQUNiLENBQUMsQ0FBQztJQUVQLENBQUM7SUFFTSxNQUFNLENBQUMsd0JBQXdCLENBQUMsU0FBUyxFQUFFLFVBQWtCO1FBQ2hFLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztZQUNkLE9BQU8sSUFBSSxDQUFDO1FBQ2hCLENBQUM7UUFDRCxNQUFNLGNBQWMsR0FBRyxTQUFTLENBQUMsOEJBQThCLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFNUUsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1lBQ2xCLE9BQU8sSUFBSSxDQUFDO1FBQ2hCLENBQUM7UUFDRCxNQUFNLEVBQUMsSUFBSSxFQUFFLElBQUksRUFBQyxHQUFHLGNBQWMsQ0FBQztRQUNwQyxPQUFPLElBQUksYUFBYSxDQUFDO1lBQ3JCLElBQUksRUFBRSxJQUFJO1lBQ1YsSUFBSSxFQUFFLElBQUk7U0FDYixDQUFDLENBQUM7SUFFUCxDQUFDO0lBRU0sWUFBWSxDQUFDLFNBQTRCLEVBQUUsT0FBdUI7UUFFckUsMkVBQTJFO1FBQzNFLE1BQU0sVUFBVSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDOUUsTUFBTSxVQUFVLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNsRixNQUFNLGNBQWMsR0FBRyxDQUFDLFVBQVUsRUFBRSxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFMUQsTUFBTSxzQkFBc0IsR0FBRyxTQUFTLENBQUMsZ0JBQWdCLENBQUMsY0FBYyxFQUFFLEVBQUMsVUFBVSxFQUFFLGdCQUFnQixFQUFDLENBQUMsQ0FBQztRQUUxRyxtREFBbUQ7UUFDbkQsT0FBTyxTQUFTLENBQUMsWUFBWSxDQUFDLHNCQUFzQixFQUFFLEVBQUMsR0FBRyxPQUFPLEVBQUUsVUFBVSxFQUFFLGdCQUFnQixFQUFDLENBQUMsQ0FBQztJQUV0RyxDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge05nYkRhdGVTdHJ1Y3QsIE5nYlRpbWVTdHJ1Y3R9IGZyb20gXCJAbmctYm9vdHN0cmFwL25nLWJvb3RzdHJhcFwiO1xuaW1wb3J0IHtEYXRldGltZUZvcm1hdHRlcn0gZnJvbSBcIi4uLy4uL3NlcnZpY2VzL2Zvcm1hdHRlcnMvZGF0ZXRpbWUvZGF0ZXRpbWUtZm9ybWF0dGVyLnNlcnZpY2VcIjtcbmltcG9ydCB7Rm9ybWF0T3B0aW9uc30gZnJvbSBcIi4uLy4uL3NlcnZpY2VzL2Zvcm1hdHRlcnMvZm9ybWF0dGVyLm1vZGVsXCI7XG5cbmV4cG9ydCBjbGFzcyBEYXRlVGltZU1vZGVsIHtcbiAgICBob3VyU3RlcCA9IDE7XG4gICAgbWludXRlU3RlcCA9IDE1O1xuICAgIHNlY29uZFN0ZXAgPSAzMDtcbiAgICBkaXNwbGF5U2Vjb25kczogYm9vbGVhbiA9IGZhbHNlO1xuICAgIGRhdGU6IE5nYkRhdGVTdHJ1Y3Q7XG4gICAgdGltZTogTmdiVGltZVN0cnVjdDtcblxuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcihpbml0PzogUGFydGlhbDxEYXRlVGltZU1vZGVsPikge1xuICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMsIGluaXQpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgdG9EYXRlVGltZVN0cnVjdChmb3JtYXR0ZXIsIGRhdGVTdHJpbmc6IHN0cmluZyk6IERhdGVUaW1lTW9kZWwgfCBudWxsIHtcbiAgICAgICAgaWYgKCFkYXRlU3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBkYXRlVGltZVN0cnVjdCA9IGZvcm1hdHRlci51c2VyRGF0ZVRpbWVGb3JtYXRUb1N0cnVjdChkYXRlU3RyaW5nKTtcblxuICAgICAgICBpZiAoIWRhdGVUaW1lU3RydWN0KSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7ZGF0ZSwgdGltZX0gPSBkYXRlVGltZVN0cnVjdDtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlVGltZU1vZGVsKHtcbiAgICAgICAgICAgIGRhdGU6IGRhdGUsXG4gICAgICAgICAgICB0aW1lOiB0aW1lXG4gICAgICAgIH0pO1xuXG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBpbnRlcm5hbFRvRGF0ZVRpbWVTdHJ1Y3QoZm9ybWF0dGVyLCBkYXRlU3RyaW5nOiBzdHJpbmcpOiBEYXRlVGltZU1vZGVsIHwgbnVsbCB7XG4gICAgICAgIGlmICghZGF0ZVN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZGF0ZVRpbWVTdHJ1Y3QgPSBmb3JtYXR0ZXIuaW50ZXJuYWxEYXRlVGltZUZvcm1hdFRvU3RydWN0KGRhdGVTdHJpbmcpO1xuXG4gICAgICAgIGlmICghZGF0ZVRpbWVTdHJ1Y3QpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHtkYXRlLCB0aW1lfSA9IGRhdGVUaW1lU3RydWN0O1xuICAgICAgICByZXR1cm4gbmV3IERhdGVUaW1lTW9kZWwoe1xuICAgICAgICAgICAgZGF0ZTogZGF0ZSxcbiAgICAgICAgICAgIHRpbWU6IHRpbWVcbiAgICAgICAgfSk7XG5cbiAgICB9XG5cbiAgICBwdWJsaWMgdG9Vc2VyRm9ybWF0KGZvcm1hdHRlcjogRGF0ZXRpbWVGb3JtYXR0ZXIsIG9wdGlvbnM/OiBGb3JtYXRPcHRpb25zKTogc3RyaW5nIHtcblxuICAgICAgICAvL3ByZXBhcmUgZGF0ZXRpbWUgc3RyaW5nIGluIHl5eXktTS1kIEg6bTpzIGZvcm1hdCAoZGF0ZXRpbWVwaWNrZXIgZGVmYXVsdClcbiAgICAgICAgY29uc3QgZGF0ZVN0cmluZyA9IFt0aGlzLmRhdGUueWVhciwgdGhpcy5kYXRlLm1vbnRoLCB0aGlzLmRhdGUuZGF5XS5qb2luKCctJyk7XG4gICAgICAgIGNvbnN0IHRpbWVTdHJpbmcgPSBbdGhpcy50aW1lLmhvdXIsIHRoaXMudGltZS5taW51dGUsIHRoaXMudGltZS5zZWNvbmRdLmpvaW4oJzonKTtcbiAgICAgICAgY29uc3QgZGF0ZXRpbWVTdHJpbmcgPSBbZGF0ZVN0cmluZywgdGltZVN0cmluZ10uam9pbignICcpO1xuXG4gICAgICAgIGNvbnN0IGludGVybmFsRGF0ZVRpbWVTdHJpbmcgPSBmb3JtYXR0ZXIudG9JbnRlcm5hbEZvcm1hdChkYXRldGltZVN0cmluZywge2Zyb21Gb3JtYXQ6ICd5eXl5LU0tZCBIOm06cyd9KTtcblxuICAgICAgICAvL2NvbnZlcnQgZnJvbSB5eXl5LU0tZCBIOm06cyBmb3JtYXQgdG8gdXNlciBmb3JtYXRcbiAgICAgICAgcmV0dXJuIGZvcm1hdHRlci50b1VzZXJGb3JtYXQoaW50ZXJuYWxEYXRlVGltZVN0cmluZywgey4uLm9wdGlvbnMsIGZyb21Gb3JtYXQ6ICd5eXl5LU0tZCBIOm06cyd9KTtcblxuICAgIH1cbn1cbiJdfQ==