import { Injectable } from '@angular/core';
import { ActionLogicHandler } from '../../../../services/actions/action-logic-handler';
import { ActiveFieldsChecker } from "../../../../services/condition-operators/active-fields-checker.service";
import * as i0 from "@angular/core";
import * as i1 from "../../../../services/condition-operators/active-fields-checker.service";
export class RecordActionDisplayTypeLogic extends ActionLogicHandler {
    constructor(activeFieldsChecker) {
        super();
        this.activeFieldsChecker = activeFieldsChecker;
        this.key = 'displayType';
        this.modes = ['edit', 'detail', 'list', 'create', 'massupdate', 'filter'];
    }
    runAll(displayLogic, data) {
        let toDisplay = true;
        const validModeLogic = Object.values(displayLogic).filter(logic => {
            const allowedModes = logic.modes ?? [];
            return !!(allowedModes.length && allowedModes.includes(data.store.getMode()));
        });
        if (!validModeLogic || !validModeLogic.length) {
            return toDisplay;
        }
        let defaultDisplay = data?.action?.display ?? 'show';
        let targetDisplay = 'hide';
        if (defaultDisplay === 'hide') {
            targetDisplay = 'show';
        }
        const isActive = validModeLogic.some(logic => this.run(data, logic));
        if (isActive) {
            defaultDisplay = targetDisplay;
        }
        toDisplay = (defaultDisplay === 'show');
        return toDisplay;
    }
    run(data, logic) {
        const record = data.store.recordStore.getStaging();
        if (!record || !logic) {
            return true;
        }
        const activeOnFields = (logic.params && logic.params.activeOnFields) || {};
        const relatedFields = Object.keys(activeOnFields);
        const activeOnAttributes = (logic.params && logic.params.activeOnAttributes) || {};
        const relatedAttributesFields = Object.keys(activeOnAttributes);
        if (!relatedFields.length && !relatedAttributesFields.length) {
            return true;
        }
        return this.activeFieldsChecker.isActive(relatedFields, record, activeOnFields, relatedAttributesFields, activeOnAttributes);
    }
    static { this.ɵfac = function RecordActionDisplayTypeLogic_Factory(__ngFactoryType__) { return new (__ngFactoryType__ || RecordActionDisplayTypeLogic)(i0.ɵɵinject(i1.ActiveFieldsChecker)); }; }
    static { this.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: RecordActionDisplayTypeLogic, factory: RecordActionDisplayTypeLogic.ɵfac, providedIn: 'root' }); }
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(RecordActionDisplayTypeLogic, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], () => [{ type: i1.ActiveFieldsChecker }], null); })();
//# sourceMappingURL=data:application/json;base64,