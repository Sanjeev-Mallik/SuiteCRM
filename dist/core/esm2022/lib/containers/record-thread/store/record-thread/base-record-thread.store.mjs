/**
 * SuiteCRM is a customer relationship management program developed by SalesAgility Ltd.
 * Copyright (C) 2021 SalesAgility Ltd.
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License version 3 as published by the
 * Free Software Foundation with the addition of the following permission added
 * to Section 15 as permitted in Section 7(a): FOR ANY PART OF THE COVERED WORK
 * IN WHICH THE COPYRIGHT IS OWNED BY SALESAGILITY, SALESAGILITY DISCLAIMS THE
 * WARRANTY OF NON INFRINGEMENT OF THIRD PARTY RIGHTS.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * In accordance with Section 7(b) of the GNU Affero General Public License
 * version 3, these Appropriate Legal Notices must retain the display of the
 * "Supercharged by SuiteCRM" logo. If the display of the logos is not reasonably
 * feasible for technical reasons, the Appropriate Legal Notices must display
 * the words "Supercharged by SuiteCRM".
 */
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { RecordListStoreFactory } from '../../../../store/record-list/record-list.store.factory';
import { map, take, tap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../../../../store/record-list/record-list.store.factory";
export class RecordStoreList {
    constructor(listStoreFactory, recordStoreFactory) {
        this.listStoreFactory = listStoreFactory;
        this.recordStoreFactory = recordStoreFactory;
        this.subs = [];
        this.stores = [];
        this.storeSubject = new BehaviorSubject([]);
        this.state$ = this.storeSubject.asObservable();
        this.pageSize = 10;
        this.recordList = listStoreFactory.create();
        this.stores$ = this.state$;
        this.storesMap$ = this.stores$.pipe(map(stores => {
            return this.getStoreMap(stores);
        }));
    }
    clear() {
        this.subs.forEach(sub => sub.unsubscribe());
    }
    clearAuthBased() {
    }
    getItemMetadata() {
        return null;
    }
    getRecordList() {
        return this.recordList;
    }
    /**
     * Initial list records load if not cached and update state.
     * Returns observable to be used in resolver if needed
     *
     * @param {string} module to use
     * @param {boolean} load
     * @param {number} pageSize
     */
    init(module, load = true, pageSize = null) {
        let pageSizeConfigKey = 'list_max_entries_per_record_thread';
        if (pageSize && isFinite(pageSize)) {
            pageSizeConfigKey = '';
            this.recordList.setPageSize(pageSize);
        }
        const load$ = this.recordList.init(module, load, pageSizeConfigKey);
        this.pageSize = this.recordList.getPageSize();
        this.subs.push(this.recordList.records$.subscribe(records => {
            this.initStores(records);
        }));
        if (!load$) {
            return;
        }
        load$.pipe(tap((recordList) => {
            this.initStores(recordList.records);
        })).pipe(take(1)).subscribe();
        this.module = module;
    }
    /**
     * Load / reload records using current pagination and criteria
     *
     * @param {boolean} useCache if to use cache
     * @returns {object} Observable<RecordList>
     */
    load(useCache = true) {
        return this.recordList.load(useCache).pipe(tap((recordList) => {
            this.initStores(recordList.records);
        }));
    }
    /**
     * Init record stores using records
     * @param records
     */
    initStores(records) {
        if (!records) {
            return;
        }
        const newStores = {};
        const storesArray = [];
        const storesMap = this.getStoreMap(this.stores);
        records.forEach(record => {
            if (!record || !record.id) {
                return;
            }
            const id = record.id;
            if (storesMap[id]) {
                const store = storesMap[id];
                store.setRecord(record);
                newStores[id] = store;
                storesArray.push(store);
                return;
            }
            newStores[id] = this.recordStoreFactory.create();
            if (this.getItemMetadata()) {
                newStores[id].setMetadata(this.getItemMetadata());
            }
            newStores[id].initRecord(record, 'detail', false);
            storesArray.push(newStores[id]);
        });
        const existingIds = Object.keys(storesMap);
        existingIds.forEach(id => {
            if (newStores[id]) {
                return;
            }
            storesMap[id].destroy();
        });
        this.updateState(storesArray);
    }
    updateState(stores) {
        this.storeSubject.next(this.stores = stores);
    }
    getStoreMap(stores) {
        const map = {};
        if (!stores || !stores.length) {
            return map;
        }
        stores.forEach(store => {
            map[store.getBaseRecord().id] = store;
        });
        return map;
    }
    getItemStores() {
        const stores = this.stores ?? [];
        if (stores && stores.length) {
            return stores;
        }
        return [];
    }
    getRecordIds() {
        const ids = [];
        if (!this.stores || !this.stores.length) {
            return ids;
        }
        this.stores.forEach(store => {
            ids.push(store.getRecordId());
        });
        return ids;
    }
    static { this.ɵfac = function RecordStoreList_Factory(__ngFactoryType__) { i0.ɵɵinvalidFactory(); }; }
    static { this.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: RecordStoreList, factory: RecordStoreList.ɵfac }); }
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(RecordStoreList, [{
        type: Injectable
    }], () => [{ type: i1.RecordListStoreFactory }, { type: undefined }], null); })();
//# sourceMappingURL=data:application/json;base64,