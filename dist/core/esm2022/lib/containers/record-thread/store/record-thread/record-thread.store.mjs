/**
 * SuiteCRM is a customer relationship management program developed by SalesAgility Ltd.
 * Copyright (C) 2021 SalesAgility Ltd.
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License version 3 as published by the
 * Free Software Foundation with the addition of the following permission added
 * to Section 15 as permitted in Section 7(a): FOR ANY PART OF THE COVERED WORK
 * IN WHICH THE COPYRIGHT IS OWNED BY SALESAGILITY, SALESAGILITY DISCLAIMS THE
 * WARRANTY OF NON INFRINGEMENT OF THIRD PARTY RIGHTS.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * In accordance with Section 7(b) of the GNU Affero General Public License
 * version 3, these Appropriate Legal Notices must retain the display of the
 * "Supercharged by SuiteCRM" logo. If the display of the logos is not reasonably
 * feasible for technical reasons, the Appropriate Legal Notices must display
 * the words "Supercharged by SuiteCRM".
 */
import { Injectable } from '@angular/core';
import { RecordListStoreFactory } from '../../../../store/record-list/record-list.store.factory';
import { RecordStoreList } from './base-record-thread.store';
import { timer } from 'rxjs';
import { SortDirection } from '../../../../common/views/list/list-navigation.model';
import { map, takeWhile, tap } from 'rxjs/operators';
import { RecordThreadItemStoreFactory } from './record-thread-item.store.factory';
import * as i0 from "@angular/core";
import * as i1 from "../../../../store/record-list/record-list.store.factory";
import * as i2 from "./record-thread-item.store.factory";
export class RecordThreadStore extends RecordStoreList {
    constructor(listStoreFactory, recordStoreFactory) {
        super(listStoreFactory, recordStoreFactory);
        this.listStoreFactory = listStoreFactory;
        this.recordStoreFactory = recordStoreFactory;
        this.autoRefreshEnabled = true;
        this.$loading = this.recordList.loading$;
    }
    init(module, load = true, pageSize = null) {
        super.init(module, load, pageSize);
        this.autoRefreshEnabled = true;
    }
    setFilters(filters) {
        let criteria = this.recordList.criteria;
        criteria = {
            ...criteria,
            ...filters
        };
        if (filters && filters.orderBy) {
            let sortOrder = SortDirection.DESC;
            if (filters.sortOrder && String(filters.sortOrder).toUpperCase() === 'ASC') {
                sortOrder = SortDirection.ASC;
            }
            this.recordList.updateSorting(filters.orderBy, sortOrder, false);
        }
        this.recordList.updateSearchCriteria(criteria, false);
        return this.load(false).pipe(map(value => value.records));
    }
    getItemMetadata() {
        return this.itemMetadata;
    }
    getListMetadata() {
        return this.listMetadata;
    }
    setItemMetadata(meta) {
        return this.itemMetadata = meta;
    }
    setListMetadata(meta) {
        return this.listMetadata = meta;
    }
    allLoaded() {
        const pagination = this.recordList.getPagination();
        if (!pagination) {
            return false;
        }
        return pagination.pageSize >= pagination.total;
    }
    loadMore(jump = null) {
        if (!jump) {
            jump = this.pageSize;
        }
        const pagination = this.recordList.getPagination();
        const currentPageSize = pagination.pageSize || 0;
        let newPageSize = currentPageSize + jump;
        this.recordList.setPageSize(newPageSize);
        this.recordList.updatePagination(0);
    }
    reload() {
        this.recordList.updatePagination(0);
    }
    getViewContext() {
        return {
            module: this.module,
            ids: this.getRecordIds(),
        };
    }
    initAutoRefresh(autoRefreshFrequency, min, max, onRefresh) {
        const currentDate = new Date();
        const startOfNextMinute = new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate(), currentDate.getHours(), currentDate.getMinutes() + 1);
        const autoRefreshTime = this.getAutoRefreshTime(autoRefreshFrequency, min, max);
        return timer(startOfNextMinute, autoRefreshTime).pipe(takeWhile(() => {
            return this.autoRefreshEnabled;
        }), tap(() => {
            this.load(false).subscribe(() => {
                if (onRefresh) {
                    onRefresh();
                }
            });
        }));
    }
    disableAutoRefresh() {
        this.autoRefreshEnabled = false;
    }
    getAutoRefreshTime(autoRefreshFrequency, min, max) {
        let autoRefreshTime = (autoRefreshFrequency * (60000));
        if (min === 0 && max === 0) {
            return autoRefreshTime;
        }
        return autoRefreshTime + this.getRandomDeviation(min, max);
    }
    getRandomDeviation(min, max) {
        min = Math.ceil(min);
        max = Math.floor(max);
        return Math.floor(Math.random() * (max - min + 1) + min) * 1000;
    }
    static { this.ɵfac = function RecordThreadStore_Factory(__ngFactoryType__) { return new (__ngFactoryType__ || RecordThreadStore)(i0.ɵɵinject(i1.RecordListStoreFactory), i0.ɵɵinject(i2.RecordThreadItemStoreFactory)); }; }
    static { this.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: RecordThreadStore, factory: RecordThreadStore.ɵfac }); }
}
(() => { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(RecordThreadStore, [{
        type: Injectable
    }], () => [{ type: i1.RecordListStoreFactory }, { type: i2.RecordThreadItemStoreFactory }], null); })();
//# sourceMappingURL=data:application/json;base64,