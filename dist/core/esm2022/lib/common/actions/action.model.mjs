/**
 * SuiteCRM is a customer relationship management program developed by SalesAgility Ltd.
 * Copyright (C) 2021 SalesAgility Ltd.
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License version 3 as published by the
 * Free Software Foundation with the addition of the following permission added
 * to Section 15 as permitted in Section 7(a): FOR ANY PART OF THE COVERED WORK
 * IN WHICH THE COPYRIGHT IS OWNED BY SALESAGILITY, SALESAGILITY DISCLAIMS THE
 * WARRANTY OF NON INFRINGEMENT OF THIRD PARTY RIGHTS.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * In accordance with Section 7(b) of the GNU Affero General Public License
 * version 3, these Appropriate Legal Notices must retain the display of the
 * "Supercharged by SuiteCRM" logo. If the display of the logos is not reasonably
 * feasible for technical reasons, the Appropriate Legal Notices must display
 * the words "Supercharged by SuiteCRM".
 */
export class ActionHandler {
    getStatus(data) {
        return '';
    }
    checkAccess(action, acls, defaultAcls) {
        let requiredAcls = defaultAcls || [];
        if (action && action.acl) {
            requiredAcls = action.acl;
        }
        if (!requiredAcls || !requiredAcls.length) {
            return true;
        }
        const aclsMap = {};
        acls.forEach(value => aclsMap[value] = value);
        return requiredAcls.every(value => aclsMap[value]);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aW9uLm1vZGVsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vY29yZS9hcHAvY29yZS9zcmMvbGliL2NvbW1vbi9hY3Rpb25zL2FjdGlvbi5tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBd0JHO0FBbUJILE1BQU0sT0FBZ0IsYUFBYTtJQUsvQixTQUFTLENBQUMsSUFBTztRQUNiLE9BQU8sRUFBRSxDQUFDO0lBQ2QsQ0FBQztJQUVTLFdBQVcsQ0FBQyxNQUFjLEVBQUUsSUFBYyxFQUFFLFdBQXNCO1FBQ3hFLElBQUksWUFBWSxHQUFHLFdBQVcsSUFBSSxFQUFFLENBQUM7UUFFckMsSUFBSSxNQUFNLElBQUksTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQ3ZCLFlBQVksR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDO1FBQzlCLENBQUM7UUFFRCxJQUFJLENBQUMsWUFBWSxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQ3hDLE9BQU8sSUFBSSxDQUFDO1FBQ2hCLENBQUM7UUFFRCxNQUFNLE9BQU8sR0FBRyxFQUFlLENBQUM7UUFDaEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQztRQUU5QyxPQUFPLFlBQVksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUN2RCxDQUFDO0NBS0oiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFN1aXRlQ1JNIGlzIGEgY3VzdG9tZXIgcmVsYXRpb25zaGlwIG1hbmFnZW1lbnQgcHJvZ3JhbSBkZXZlbG9wZWQgYnkgU2FsZXNBZ2lsaXR5IEx0ZC5cbiAqIENvcHlyaWdodCAoQykgMjAyMSBTYWxlc0FnaWxpdHkgTHRkLlxuICpcbiAqIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOyB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5IGl0IHVuZGVyXG4gKiB0aGUgdGVybXMgb2YgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSB2ZXJzaW9uIDMgYXMgcHVibGlzaGVkIGJ5IHRoZVxuICogRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIHdpdGggdGhlIGFkZGl0aW9uIG9mIHRoZSBmb2xsb3dpbmcgcGVybWlzc2lvbiBhZGRlZFxuICogdG8gU2VjdGlvbiAxNSBhcyBwZXJtaXR0ZWQgaW4gU2VjdGlvbiA3KGEpOiBGT1IgQU5ZIFBBUlQgT0YgVEhFIENPVkVSRUQgV09SS1xuICogSU4gV0hJQ0ggVEhFIENPUFlSSUdIVCBJUyBPV05FRCBCWSBTQUxFU0FHSUxJVFksIFNBTEVTQUdJTElUWSBESVNDTEFJTVMgVEhFXG4gKiBXQVJSQU5UWSBPRiBOT04gSU5GUklOR0VNRU5UIE9GIFRISVJEIFBBUlRZIFJJR0hUUy5cbiAqXG4gKiBUaGlzIHByb2dyYW0gaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCwgYnV0IFdJVEhPVVRcbiAqIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTXG4gKiBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuIFNlZSB0aGUgR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlXG4gKiBkZXRhaWxzLlxuICpcbiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICogYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKlxuICogSW4gYWNjb3JkYW5jZSB3aXRoIFNlY3Rpb24gNyhiKSBvZiB0aGUgR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG4gKiB2ZXJzaW9uIDMsIHRoZXNlIEFwcHJvcHJpYXRlIExlZ2FsIE5vdGljZXMgbXVzdCByZXRhaW4gdGhlIGRpc3BsYXkgb2YgdGhlXG4gKiBcIlN1cGVyY2hhcmdlZCBieSBTdWl0ZUNSTVwiIGxvZ28uIElmIHRoZSBkaXNwbGF5IG9mIHRoZSBsb2dvcyBpcyBub3QgcmVhc29uYWJseVxuICogZmVhc2libGUgZm9yIHRlY2huaWNhbCByZWFzb25zLCB0aGUgQXBwcm9wcmlhdGUgTGVnYWwgTm90aWNlcyBtdXN0IGRpc3BsYXlcbiAqIHRoZSB3b3JkcyBcIlN1cGVyY2hhcmdlZCBieSBTdWl0ZUNSTVwiLlxuICovXG5cbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5pbXBvcnQge1ZpZXdNb2RlfSBmcm9tICcuLi92aWV3cy92aWV3Lm1vZGVsJztcbmltcG9ydCB7UmVjb3JkfSBmcm9tICcuLi9yZWNvcmQvcmVjb3JkLm1vZGVsJztcbmltcG9ydCB7U2VhcmNoQ3JpdGVyaWF9IGZyb20gJy4uL3ZpZXdzL2xpc3Qvc2VhcmNoLWNyaXRlcmlhLm1vZGVsJztcbmltcG9ydCB7U3RyaW5nTWFwfSBmcm9tICcuLi90eXBlcy9zdHJpbmctbWFwJztcbmltcG9ydCB7IExvZ2ljRGVmaW5pdGlvbnMgfSBmcm9tICcuLi9tZXRhZGF0YS9tZXRhZGF0YS5tb2RlbCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQWN0aW9uRGF0YSB7XG4gICAgW2tleTogc3RyaW5nXTogYW55O1xuXG4gICAgYWN0aW9uPzogQWN0aW9uO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFjdGlvbkhhbmRsZXJNYXA8RCBleHRlbmRzIEFjdGlvbkRhdGE+IHtcbiAgICBba2V5OiBzdHJpbmddOiBBY3Rpb25IYW5kbGVyPEQ+O1xufVxuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQWN0aW9uSGFuZGxlcjxEIGV4dGVuZHMgQWN0aW9uRGF0YT4ge1xuICAgIGFic3RyYWN0IGtleTogc3RyaW5nO1xuXG4gICAgYWJzdHJhY3QgbW9kZXM6IFZpZXdNb2RlW107XG5cbiAgICBnZXRTdGF0dXMoZGF0YTogRCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgY2hlY2tBY2Nlc3MoYWN0aW9uOiBBY3Rpb24sIGFjbHM6IHN0cmluZ1tdLCBkZWZhdWx0QWNscz86IHN0cmluZ1tdKTogYm9vbGVhbiB7XG4gICAgICAgIGxldCByZXF1aXJlZEFjbHMgPSBkZWZhdWx0QWNscyB8fCBbXTtcblxuICAgICAgICBpZiAoYWN0aW9uICYmIGFjdGlvbi5hY2wpIHtcbiAgICAgICAgICAgIHJlcXVpcmVkQWNscyA9IGFjdGlvbi5hY2w7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXJlcXVpcmVkQWNscyB8fCAhcmVxdWlyZWRBY2xzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBhY2xzTWFwID0ge30gYXMgU3RyaW5nTWFwO1xuICAgICAgICBhY2xzLmZvckVhY2godmFsdWUgPT4gYWNsc01hcFt2YWx1ZV0gPSB2YWx1ZSk7XG5cbiAgICAgICAgcmV0dXJuIHJlcXVpcmVkQWNscy5ldmVyeSh2YWx1ZSA9PiBhY2xzTWFwW3ZhbHVlXSk7XG4gICAgfVxuXG4gICAgYWJzdHJhY3QgcnVuKGRhdGE6IEQsIGFjdGlvbj86IEFjdGlvbik6IHZvaWQ7XG5cbiAgICBhYnN0cmFjdCBzaG91bGREaXNwbGF5KGRhdGE6IEQpOiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE1vZGVBY3Rpb25zIHtcbiAgICBba2V5OiBzdHJpbmddOiBBY3Rpb25bXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBY3Rpb24ge1xuICAgIFtrZXk6IHN0cmluZ106IGFueTtcblxuICAgIGtleTogc3RyaW5nO1xuICAgIGxhYmVsS2V5Pzogc3RyaW5nO1xuICAgIHRpdGxlS2V5Pzogc3RyaW5nO1xuICAgIGxhYmVsPzogc3RyaW5nO1xuICAgIGljb24/OiBzdHJpbmc7XG4gICAga2xhc3M/OiBzdHJpbmdbXTtcbiAgICBzdGF0dXM/OiBzdHJpbmc7XG4gICAgbW9kZXM/OiBzdHJpbmdbXTtcbiAgICBhc3luY1Byb2Nlc3M/OiBib29sZWFuO1xuICAgIHBhcmFtcz86IHsgW2tleTogc3RyaW5nXTogYW55IH07XG4gICAgZXh0cmFQYXJhbXM/OiB7IFtrZXk6IHN0cmluZ106IGFueSB9O1xuICAgIGFjbD86IHN0cmluZ1tdO1xuICAgIGRpc3BsYXlMb2dpYz86IExvZ2ljRGVmaW5pdGlvbnM7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQWN0aW9uRGF0YVNvdXJjZSB7XG4gICAgY29sbGFwc2VCdXR0b25zPzogYm9vbGVhbjtcblxuICAgIGdldEFjdGlvbnMoY29udGV4dD86IEFjdGlvbkNvbnRleHQpOiBPYnNlcnZhYmxlPEFjdGlvbltdPjtcblxuICAgIHJ1bkFjdGlvbihhY3Rpb246IEFjdGlvbiwgY29udGV4dD86IEFjdGlvbkNvbnRleHQpOiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFjdGlvbk1hbmFnZXI8RCBleHRlbmRzIEFjdGlvbkRhdGE+IHtcblxuICAgIHJ1bihhY3Rpb246IEFjdGlvbiwgbW9kZTogVmlld01vZGUsIGRhdGE6IEQpOiB2b2lkO1xuXG4gICAgZ2V0SGFuZGxlcihhY3Rpb246IEFjdGlvbiwgbW9kZTogVmlld01vZGUpOiBBY3Rpb25IYW5kbGVyPEQ+O1xuXG4gICAgYWRkSGFuZGxlcihhY3Rpb246IEFjdGlvbiwgbW9kZTogVmlld01vZGUsIGhhbmRsZXI6IEFjdGlvbkhhbmRsZXI8RD4pOiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFjdGlvbkNvbnRleHQge1xuICAgIFtrZXk6IHN0cmluZ106IGFueTtcblxuICAgIG1vZHVsZT86IHN0cmluZztcbiAgICByZWNvcmQ/OiBSZWNvcmQ7XG4gICAgaWRzPzogc3RyaW5nW107XG4gICAgY3JpdGVyaWE/OiBTZWFyY2hDcml0ZXJpYTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBY3RpdmVMaW5lQWN0aW9uIHtcbiAgICBhY3RpdmVBY3Rpb24kOiBPYnNlcnZhYmxlPHN0cmluZz47XG4gICAgZ2V0QWN0aXZlQWN0aW9uKCk6IHN0cmluZztcbiAgICBzZXRBY3RpdmVBY3Rpb24oa2V5OiBzdHJpbmcpOiB2b2lkO1xuICAgIHJlc2V0QWN0aXZlQWN0aW9uKCk6IHZvaWQ7XG59XG4iXX0=