/**
 * SuiteCRM is a customer relationship management program developed by SalesAgility Ltd.
 * Copyright (C) 2021 SalesAgility Ltd.
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License version 3 as published by the
 * Free Software Foundation with the addition of the following permission added
 * to Section 15 as permitted in Section 7(a): FOR ANY PART OF THE COVERED WORK
 * IN WHICH THE COPYRIGHT IS OWNED BY SALESAGILITY, SALESAGILITY DISCLAIMS THE
 * WARRANTY OF NON INFRINGEMENT OF THIRD PARTY RIGHTS.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * In accordance with Section 7(b) of the GNU Affero General Public License
 * version 3, these Appropriate Legal Notices must retain the display of the
 * "Supercharged by SuiteCRM" logo. If the display of the logos is not reasonably
 * feasible for technical reasons, the Appropriate Legal Notices must display
 * the words "Supercharged by SuiteCRM".
 */
import { BehaviorSubject } from 'rxjs';
import { signal } from "@angular/core";
export class BaseField {
    constructor() {
        this.loading = signal(false);
        this.fieldDependencies = {};
        this.attributeDependencies = [];
        this.defaultValueInitialized = false;
        this.valueSubject = new BehaviorSubject({});
        this.valueChanges$ = this.valueSubject.asObservable();
        this.display = signal('default');
        this.required = signal(false);
    }
    get value() {
        return this.valueState;
    }
    set value(value) {
        const changed = value !== this.valueState;
        this.valueState = value;
        if (changed) {
            this.emitValueChanges();
        }
    }
    get valueList() {
        return this.valueListState;
    }
    set valueList(value) {
        this.valueListState = value;
        this.emitValueChanges();
    }
    get valueObject() {
        return this.valueObjectState;
    }
    set valueObject(value) {
        this.valueObjectState = value;
        this.emitValueChanges();
    }
    get valueObjectArray() {
        return this.valueObjectArrayState;
    }
    set valueObjectArray(value) {
        this.valueObjectArrayState = value;
        this.emitValueChanges();
    }
    emitValueChanges() {
        this.valueSubject.next({
            value: this.valueState,
            valueList: this.valueListState,
            valueObject: this.valueObjectState
        });
    }
    initDefaultValue() {
        if (this.defaultValueInitialized) {
            return;
        }
        const defaultValue = this?.default ?? this?.definition?.default ?? null;
        if (!this.value && defaultValue) {
            this.value = defaultValue;
            this?.formControl?.setValue(defaultValue);
            this.defaultValueInitialized = true;
        }
        else if (this.value === null) {
            this.value = '';
        }
    }
}
//# sourceMappingURL=data:application/json;base64,